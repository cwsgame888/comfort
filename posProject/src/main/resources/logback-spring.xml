<?xml version="1.0" encoding="UTF-8"?>
<configuration debug="true">
	<appender name="console" class="ch.qos.logback.core.ConsoleAppender">
		<encoder>
			<Pattern>%d %5p [%c] %m%n</Pattern>
		</encoder>
	</appender>
	
	<appender name="console-infolog" class="ch.qos.logback.core.ConsoleAppender">
		<encoder>
			<Pattern>%d %5p %m%n</Pattern>
		</encoder>
	</appender>
	
	<!-- debug -->
	<logger name="debug" level="DEBUG" additivity="false">
		<appender-ref ref="console"/>
	</logger>

	<logger name="com.core" level="DEBUG" additivity="false">
		<appender-ref ref="console"/>
	</logger>
	<logger name="com.pos" level="DEBUG" additivity="false">
		<appender-ref ref="console"/>
	</logger>
	<!-- 
	- jdbc.sqlonly : SQL문만을 로그로 남기며, PreparedStatement일 경우 관련된 argument 값으로 대체된 SQL문이 보여진다. 
	- jdbc.sqltiming : SQL문과 해당 SQL을 실행시키는데 수행된 시간 정보(milliseconds)를 포함한다. 
	- jdbc.audit : ResultSet을 제외한 모든 JDBC 호출 정보를 로그로 남긴다. 많은 양의 로그가 생성되므로 특별히 JDBC 문제를 추적해야 할 필요가 있는 경우를 제외하고는 사용을 권장하지 않는다. 
	- jdbc.resultset : ResultSet을 포함한 모든 JDBC 호출 정보를 로그로 남기므로 매우 방대한 양의 로그가 생성된다. 
	- jdbc.resultsettable : SQL 결과 조회된 데이터의 table을 로그로 남긴다. 
	-->
	<logger name="jdbc.sqlonly" level="console-infolog" additivity="false">
		<appender-ref ref="console"/>
	</logger>
	<!-- <logger name="jdbc.sqltiming" level="console-infolog" additivity="false">
		<appender-ref ref="console"/>
	</logger> -->
	<logger name="jdbc.resultsettable" level="console-infolog" additivity="false">
		<appender-ref ref="console"/>
	</logger>
	
	<!-- root -->
	<root level="debug">
		<appender-ref ref="console"/>
	</root>
</configuration>