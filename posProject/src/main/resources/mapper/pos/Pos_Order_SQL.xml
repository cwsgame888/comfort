<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.pos.mapper.PosOrderMapper">
	<!-- 메뉴 리스트 조회 -->
	<select id="selectMenuList" parameterType="DataMap" resultType="DataMap">
		SELECT
			MENU_ID
			, MENU_NAME
			, MENU_PRICE
			, MENU_KIND
			, (SELECT CODE_VALUE FROM POS_CODE WHERE CODE_GROUP = 'MENU_KIND' AND CODE_ID = MENU_KIND) AS MENU_KIND_NAME
			, MENU_STATE
			, MENU_PRIORITY
			, MENU_LAST_UPDATE
		FROM
			POS_MENU
		WHERE 1=1 AND MENU_STATE = 'Y'
		ORDER BY TO_NUMBER(MENU_PRIORITY) ASC
	</select>
	<!-- 메뉴 정보 조회 -->
	<select id="getMenuInfo" parameterType="DataMap" resultType="DataMap">
		SELECT
			MENU_ID
			, MENU_NAME
			, MENU_PRICE
			, MENU_KIND
			, (SELECT CODE_VALUE FROM POS_CODE WHERE CODE_GROUP = 'MENU_KIND' AND CODE_ID = MENU_KIND) AS MENU_KIND_NAME
			, MENU_STATE
			, MENU_PRIORITY
			, MENU_LAST_UPDATE
		FROM
			POS_MENU
		WHERE 1=1 AND MENU_STATE = 'Y' AND MENU_ID = #{menuId}
	</select>
	<!-- 테이블 주문번호 조회 -->
	<select id="getOrderInfo" parameterType="DataMap" resultType="DataMap">
		SELECT
			TABLE_ROW
			, TABLE_COL
			, ORDER_NUM
			, ORDER_STATE
			, ORDER_AMOUNT
			, ORDER_HEAD_COUNT
			, ORDER_AGE
			, ORDER_TIME
			, ORDER_LAST_UPDATE
		FROM
			POS_ORDER
		WHERE 1=1 AND TABLE_ROW = #{TABLE_ROW} AND TABLE_COL = #{TABLE_COL} AND ORDER_STATE = 'ORDERING'
	</select>
	<!-- 테이블 주문메뉴 조회 -->
	<select id="getOrderMenuInfo" parameterType="DataMap" resultType="DataMap">
		SELECT 
			A.MENU_ID
			, B.MENU_NAME
			, B.MENU_PRICE AS ORI_PRICE
			, A.QUANTITY
			, CASE ORDER_MENU_STATE
				WHEN 'SERVICE' THEN 0
				ELSE (A.QUANTITY * B.MENU_PRICE)
				END AS PRICE
			, B.MENU_KIND
			, C.CODE_VALUE AS MENU_KIND_NAME
			, ORDER_MENU_STATE 
		FROM (
			SELECT MENU_ID
				, COUNT(MENU_ID) AS QUANTITY
				, 'NON_SERVICE' AS ORDER_MENU_STATE
			FROM
				POS_ORDER_MENU 
			WHERE ORDER_NUM = #{ORDER_NUM} AND ORDER_MENU_STATE != 'SERVICE'
			GROUP BY ORDER_MENU_STATE, MENU_ID
			UNION
			SELECT MENU_ID
				, COUNT(MENU_ID) AS QUANTITY
				, ORDER_MENU_STATE
			FROM
				POS_ORDER_MENU 
			WHERE ORDER_NUM = #{ORDER_NUM} AND ORDER_MENU_STATE = 'SERVICE'
			GROUP BY ORDER_MENU_STATE, MENU_ID 
		) A
		JOIN POS_MENU B ON A.MENU_ID = B.MENU_ID
		JOIN POS_CODE C ON B.MENU_KIND = C.CODE_ID
		ORDER BY ORDER_MENU_STATE, MENU_KIND_NAME ASC
	</select>
	<!-- 주문번호를 따기 위한 당일 주문번호를 조회 후 +1 해서 반환해준다. -->
	<select id="todayNextOrderNum" resultType="String">
		SELECT MAX(ORDER_NUM)+1 FROM POS_ORDER WHERE ORDER_NUM LIKE TO_CHAR(TRUNC(SYSDATE),'YYYYMMDD')||'%'
	</select>
	<!-- 주문 넣기 -->
	<insert id="insertOrder" parameterType="DataMap">
		INSERT INTO POS_ORDER (
				TABLE_ROW
				, TABLE_COL
				, ORDER_NUM
				, ORDER_STATE
				, ORDER_AMOUNT
				, ORDER_HEAD_COUNT
				, ORDER_AGE
				, ORDER_TIME
				, ORDER_LAST_UPDATE
			) VALUES (
				#{TABLE_ROW}
				, #{TABLE_COL}
				, #{ORDER_NUM}
				, 'ORDERING'
				, '0'
				, #{ORDER_HEAD_COUNT}
				, #{ORDER_AGE}
				, TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS')
				, TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS')
			)
	</insert>
	<!-- 추가주문 넣기 
	<update id="updateOrder">
		UPDATE POS_ORDER SET 
			ORDER_AMOUNT = TO_NUMBER((SELECT ORDER_AMOUNT FROM POS_ORDER WHERE ORDER_NUM = #{ORDER_NUM})) + ${ORDER_AMOUNT}
			, ORDER_HEAD_COUNT = #{ORDER_HEAD_COUNT}
			, ORDER_LAST_UPDATE = TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS')
		WHERE ORDER_NUM = #{ORDER_NUM}
	</update> -->
	
	<!-- 추가주문, 주문 취소, 주문 서비스에 대한 총금액 업데이트 -->
	<update id="updateOrder" parameterType="DataMap">
		UPDATE POS_ORDER SET 
			ORDER_AMOUNT = NVL((
				SELECT 
					DECODE(SUM(MENU_PRICE), NULL, 0, SUM(MENU_PRICE))
				FROM POS_ORDER_MENU A, POS_MENU B
				WHERE A.MENU_ID = B.MENU_ID AND (A.ORDER_MENU_STATE = 'SUCCES' OR A.ORDER_MENU_STATE = 'ORDERING') AND A.ORDER_NUM = #{ORDER_NUM}
				GROUP BY A.ORDER_NUM
				), 0)
			, ORDER_LAST_UPDATE = TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS')
			<if test="ORDER_AGE != null and ORDER_AGE != ''">
				, ORDER_AGE = #{ORDER_AGE}
			</if>
			<if test="ORDER_HEAD_COUNT != null and ORDER_HEAD_COUNT != ''">
				, ORDER_HEAD_COUNT = #{ORDER_HEAD_COUNT}
			</if>
		WHERE ORDER_NUM = #{ORDER_NUM}
	</update>
	<!-- 주문메뉴 넣기 -->
	<insert id="insertOrderMenu" parameterType="DataMap">
		INSERT INTO POS_ORDER_MENU (
				ORDER_NUM
				, MENU_ID
				, ORDER_MENU_STATE
				, ORDER_LAST_UPDATE
			) VALUES (
				#{ORDER_NUM}
				, #{MENU_ID}
				, CASE NVL((
						SELECT B.ETC1 FROM POS_MENU A
						JOIN POS_CODE B ON B.CODE_GROUP = 'MENU_KIND' AND A.MENU_KIND = B.CODE_ID
						WHERE A.MENU_ID = #{MENU_ID}
					), '')
					WHEN 'N' THEN 'SUCCES'
					ELSE 'ORDERING'
					END
				, TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS')
			)
	</insert>
	
	<!-- 주문메뉴 서비스 -->
	<update id="updateServiceOrderMenu" parameterType="DataMap">
		UPDATE POS_ORDER_MENU SET 
			<if test="ORDER_MENU_STATE != 'SERVICE'">
				ORDER_MENU_STATE = 'SERVICE'
			</if>
			<if test="ORDER_MENU_STATE == 'SERVICE'">
				ORDER_MENU_STATE = 'ORDERING'
			</if>
		WHERE ORDER_NUM = #{ORDER_NUM}
		<if test="MENU_ID != null and MENU_ID != ''">
			AND MENU_ID = #{MENU_ID}
			<if test="ORDER_MENU_STATE != 'SERVICE'">
				AND ORDER_MENU_STATE != 'SERVICE'
			</if>
			<if test="ORDER_MENU_STATE == 'SERVICE'">
				AND ORDER_MENU_STATE = 'SERVICE'
			</if>
			AND ROWNUM = 1
		</if>
	</update>
	
	<!-- 주문메뉴 취소 -->
	<delete id="deleteOrderMenu" parameterType="DataMap">
		DELETE FROM POS_ORDER_MENU 
		WHERE ORDER_NUM = #{ORDER_NUM}
		<if test="MENU_ID != null and MENU_ID != ''">
			AND MENU_ID = #{MENU_ID}
			<if test="ORDER_MENU_STATE != 'SERVICE'">
				AND ORDER_MENU_STATE != 'SERVICE'
			</if>
			<if test="ORDER_MENU_STATE == 'SERVICE'">
				AND ORDER_MENU_STATE = 'SERVICE'
			</if>
			AND ROWNUM = 1
		</if>
	</delete>
	
	<!-- 주문메뉴 카운트 조회 -->
	<select id="getOrderListCount" parameterType="DataMap" resultType="DataMap">
		SELECT COUNT(*) AS ORDER_COUNT FROM (
			SELECT 
				ORDER_LAST_UPDATE
			FROM POS_ORDER_MENU
			WHERE ORDER_MENU_STATE = 'ORDERING'
        	GROUP BY ORDER_LAST_UPDATE
        )
	</select>
	
	<!-- 주문메뉴 전광판 조회 -->
	<select id="getOrderList" parameterType="DataMap" resultType="DataMap">
		SELECT 			
			MAX(TABLE_NAME) AS TABLE_NAME
            , MAX(ORDER_NUM) AS ORDER_NUM
			, MAX(MENU_ID) AS MENU_ID
			, MENU_NAME
            , COUNT(MENU_NAME) AS MENU_NAME_COUNT
			, MAX(ORDER_MENU_STATE) AS ORDER_MENU_STATE
			, ORDER_LAST_UPDATE FROM(
			SELECT 
				D.TABLE_NAME
	            , A.ORDER_NUM
				, A.MENU_ID
				, B.MENU_NAME
				, A.ORDER_MENU_STATE
				, A.ORDER_LAST_UPDATE
			FROM POS_ORDER_MENU A
	        JOIN POS_MENU B ON A.MENU_ID = B.MENU_ID 
	        JOIN POS_ORDER C ON A.ORDER_NUM = C.ORDER_NUM
	        JOIN POS_TABLE D ON D.TABLE_ROW = C.TABLE_ROW AND D.TABLE_COL = C.TABLE_COL
			WHERE A.ORDER_MENU_STATE = 'ORDERING')
	        GROUP BY ORDER_LAST_UPDATE, MENU_NAME
        ORDER BY ORDER_LAST_UPDATE ASC
	</select>
	
	<!-- 주문메뉴 완료 업데이트(메뉴 조리 완료) -->
	<update id="updateOrderMenu">
		UPDATE POS_ORDER_MENU SET ORDER_MENU_STATE = '' 
		WHERE ORDER_NUM = #{ORDER_NUM}
	</update>
	
	<!-- 결제테이블 insert -->
	<insert id="insertPayment" parameterType="DataMap">
		INSERT INTO POS_PAYMENT (
				ORDER_NUM
				, PAYMENT_KIND
				, PAYMENT_AMOUNT
				<if test="DISCOUNT_KIND != null and DISCOUNT_KIND != ''">
					, DISCOUNT_KIND
					, DISCOUNT_VALUE
				</if>
				, ORDER_AMOUNT
				, PAYMENT_LAST_UPDATE
			) VALUES (
				#{ORDER_NUM}
				, #{PAYMENT_KIND}
				<if test="DISCOUNT_KIND != null and DISCOUNT_KIND != ''">
					<choose>
						<when test="DISCOUNT_KIND != null and DISCOUNT_KIND == 'PERCENT'">
							, (SELECT ORDER_AMOUNT FROM POS_ORDER WHERE ORDER_NUM = #{ORDER_NUM}) * ((100 - ${DISCOUNT_VALUE})/100)
						</when>
						<otherwise>
							, (SELECT ORDER_AMOUNT FROM POS_ORDER WHERE ORDER_NUM = #{ORDER_NUM}) - ${DISCOUNT_VALUE}
						</otherwise>
					</choose>					
				</if>
				<if test="DISCOUNT_KIND == null or DISCOUNT_KIND == ''">
					, (SELECT ORDER_AMOUNT FROM POS_ORDER WHERE ORDER_NUM = #{ORDER_NUM})
				</if>
				<if test="DISCOUNT_KIND != null and DISCOUNT_KIND != ''">
					, #{DISCOUNT_KIND}
					, #{DISCOUNT_VALUE}
				</if>
				, (SELECT ORDER_AMOUNT FROM POS_ORDER WHERE ORDER_NUM = #{ORDER_NUM})
				, TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS')
			)
	</insert>
	<!-- 주문 결제(주문완료처리) -->
	<update id="updatePaymentOrder" parameterType="DataMap">
		UPDATE POS_ORDER SET ORDER_STATE = 'SUCCES' WHERE ORDER_NUM = #{ORDER_NUM}
	</update>
	<!-- 주문 결제(주문들어간 메뉴 완료처리) -->
	<update id="updateCompleteOrder" parameterType="DataMap">
		UPDATE POS_ORDER_MENU SET ORDER_MENU_STATE = 'SUCCES' 
		WHERE ORDER_NUM = #{ORDER_NUM} AND ORDER_MENU_STATE != 'SERVICE'
		<if test="ORDER_LAST_UPDATE != null and ORDER_LAST_UPDATE != ''">
			AND ORDER_LAST_UPDATE = #{ORDER_LAST_UPDATE}
		</if>
	</update>
	<!-- 주문 테이블 취소 하기 -->
	<update id="updateCancelOrder" parameterType="DataMap">
		UPDATE POS_ORDER SET ORDER_STATE = 'CANCEL' WHERE ORDER_NUM = #{ORDER_NUM}
	</update>
	<!-- 주문메뉴 테이블 취소 하기 -->
	<update id="updateCancelOrderMenu" parameterType="DataMap">
		UPDATE POS_ORDER_MENU SET ORDER_MENU_STATE = 'CANCEL' WHERE ORDER_NUM = #{ORDER_NUM}
	</update>
</mapper>